HowNetworkWorks_Notes.txt
1. 浏览器生成消息
1.1 生成HTTP请求消息
1.1.1 探索之旅从输入网址开始
        URL: Uniform Resource Locator
        浏览器除了访问Web服务器（用HPPT协议），还可以在FTP服务器上下载和上传文件（File Transfer Protocol），作为电子邮件客户端等功能
        URL开头说明浏览器应当使用的访问方法（协议）：'http:', 'ftp:', 'file:', 'mailto:'
1.1.2 浏览器要先解析URL
        浏览器将URL拆分成各个元素：1.协议，2.Web服务器名称，3.数据源（文件）的路径名
        e.g.http://www.google.com/dir1/file1.html
1.1.3 省略文件名的情况
        例子1: http://www.lab.glasscom.com/dir/
        例子2: http://www.lab.glasscom.com/
                有目录名，省略了文件名，访问默认文件
        例子3: http://www.lab.glasscom.com
                无目录名，访问根目录默认文件
        例子4: http://www.lab.glasscom.com/whatthehell
                如有whatthehell文件，则访问文件；如有whatthehell目录，则当目录
1.1.4 HTTP的基本思路
        HTTP协议定义了客户端和服务器之间交互的消息内容和步骤
                A. 客户端享服务器发送请求消息 （’对什么‘+’进行什么操作‘，即URI（各种访问目标）+方法）
                        常用方法：get, post, head, put, delete, connect, options, trace
                B. Web服务器对内容进行解析，判断对什么，进行什么操作，完成自己的工作，将结果放在相应消息中
                C. 客户端收到响应消息，浏览器读出所需数据并显示在屏幕上
1.1.5 生成HTTP请求消息
        第一行：方法，URL，HTTP版本号
        第二行：消息头 （p.17 HTTP中的主要头字段）
        第三行：空行
        第四行及以后：需要发送的数据
1.1.6  发送请求后会收到响应
        第一行：状态码和响应短语
                状态码：1xx-告知请求的处理进度和情况；2xx-成功；3xx-需要进一步操作；4xx-客户端错误；5xx-服务器错误
        返回响应后，浏览器将数据提出出来并显示在屏幕上
        1条请求消息中只能写1个URI。若需要获取多个文件，需要对每个文件单独发送1条请求
1.2 向DNS服务器查询Web服务器的IP地址
1.2.1 IP地址的基本知识
        浏览器没有发送消息功能，需要委托操作系统发送请求消息。发送前需要查询到通信对象的IP地址
        IP地址分为两部分：网络号（分配给整个子网的）和主机号（分配给子网中的计算机）
        IP地址长度共32bit；IP的主机号全部为0表示整个子网，全部为1表示想子网上所有设备发送包，及’广播‘
        子网掩码（subnet mask）：用于区别IP地址的网络号和主机号。长度共32bit，左边一半都是1，右边都是0；子网掩码为1的部分表示网络号，为0的表示主机号
        TCP/IP：由一些小的子网（用集线器连接起来的几台计算器），通过路由器连接起来组成一个大的网络。发送消息时，消息先经过子网中的集线器，发送到最近的路由器，路由器根据接收方IP地址转发给下一个路由器，如此接力，最后的到达目的地。
1.2.2 域名和IP地址并用的理由
        直接用IP地址，不用名称不现实：IP地址太难记
        直接用名称效率低：IP地址4字节的数字，而名称长度不等，并且最长可达255字节
        所以让人使用名称，让路由器使用IP地址，并且用DNS（Domain Name System）作为中间查询机制
1.2.3 Socket库（library）提供查询IP地址的功能
        计算机的DNS客户端成为DNS解析器；通过DNS查询IP地址的操作称为域名解析
        解析器是一段程序，包含在操作系统的Socket库中
        Socket库是用于调用网络功能的程序组建集合
        [Notes on diff among library, framework and module: libary is a 'collection of related functionlaity'; a framework 's main characteristic is 'inversion of control'; 
        a module is an 'abstract interfact with exports and imports, implementation and interface areseparate, there may be multiple implementations and the implementation is hidden'
        --- https://stackoverflow.com/questions/4099975/difference-between-a-module-library-and-a-framework]
1.2.4 通过解析器像DNS服务器发出查询
        根据域名查询IP地址时，浏览器会使用Socket库中的解析器
1.2.5 解析器的内部原理
        A. 浏览器（网络应用程序）调用解析器
        B. 控制流程转移到解析器内部
        C. 解析器生成查询消息，委托协议栈发送
        D. 返回响应消息
        E. 解析器从响应消息去除IP地址，放入浏览器指定的内存地址中
        DNS服务器的IP地址作为TCP/IP的一个设置项目事先设置好的
1.3 全世界DNS服务器的大接力
1.3.1 DNS服务器的基本工作
        接收来自客户端的查询消息，然后从域名与IP地址的对照表中查找相应的记录，并返回IP地址
        客户端的查询消息包括三个信息：1.域名（服务器、邮件服务器（@后面的部分）的名称），2.Class（值永远为‘IN'），3.记录类型（如'A',表示域名对应的是IP地址；'MX',表示域名对应的是邮件服务器
1.3.2 域名的层次结构
        客户端最近的DNS服务器不一定有全部需要访问的Web服务器的IP地址，需要从其他DNS服务器获取此信息
        DNS服务器中的所有信息都是按照域名以分层次的结构来保存的
        DNS中用句点来分割域名，越靠右的位置表示其层级越高
        域的下面可创建子域
1.3.3 寻找相应的DNS服务器并获取IP地址
        目标是找到要方位的Web服务器的信息归哪一台DNS服务器管
        将负责管理下级域的DNS服务器的IP地址注册到他们的上级DNS服务器中，如此类推（最高级域为根域），并将根域的DNS信息保存在互联网中所有的DNS服务器中
1.3.4 通过缓存加快DNS服务器的响应
        缓存指的是将使用过的数据存放在离使用该数据的地方较低的高速存储装置中，以便提高后续访问速度的技术
        缓存中的信息都有一个有效期
        DNS返回响应时也会告知客户端响应的结果时来自缓存中还是来自负责管理该域名的DNS服务器
1.4 委托协议栈发送消息
1.4.1 数据收发操作概览
        知道了IP地址后，委托操作系统内部的协议栈向目标IP发送消息 （发给Web服务器的HTTP消息是一种数字信息）
        向协议栈发出委托时，需要按照指定的顺序来调用Socket库中的程序组件
        数据收发的操作可大致分为以下4个：
        A. 创建套接字（创建套接字阶段）
        B. 将管道连接到服务器端的套接字上（连接阶段）
        C. 收发数据（通信阶段）
        D. 断开管道并删除套接字（断开阶段）
        套接字：’管道‘两端的数据出入口（接口）
1.4.2 创建套接字阶段
        客户端创建套接字，只要掉用Socket库中的socket程序组件
        套接字创建完成后，协议栈会返回一个描述符，应用程序会将收到的描述符存放在内存中
        描述符，类似号码牌，应用程序用来识别套接字的机制
1.4.3 连接阶段：把管道连接上去
        委托协议栈将客户端创建的套接字与服务器的套接字连接起来：应用程序通过调用Socket库中的connect程序组件完成此操作
        调用connect时，需要指定三个参数1.描述符（当调用Socket库中的组件程序是，应用程序所指定的参数会通过Socket库的程序组建传递给协议栈，由协议栈来实际执行相应的操作），2.服务器IP地址，3.端口号（服务器上的端口号是根据应用的种类实现规定好的，如Web是80，电子邮件是25）
        IP地址是分配给设备中安装的网络硬件的，有了IP地址，可以识别网络上的某台计算机，但是当对象是某套具体的套接字，则需要端口号
        客户端在创建套接字时，协议栈会为这个套接字随机分配一个端口号，连接时将此端口号通知服务器
1.4.4 通信阶段：传递信息
        A. 应用程序在内存中准备好要发送的数据（根据用户输入的网址生成的HTTP请求消息就是要发送的数据）
        B. 调用Socket库中的write程序组件，指定描述符和发送数据
        C. 服务器执行接收操作，解析数据内容并执行相应的操作，向客户返回响应消息
        D. 调用Socket库中的read程序组件，指定用于存放接收到的响应消息的内存地址（接受缓冲区），委托协议栈完成
        E. 消息被放到接受缓冲区，转交给应用程序
1.4.5 断开阶段：收发数据结束
        浏览器收到数据，调用Socket库中的close程序组建进入断开阶段，连接套接字之间的管道会被断开，套接字也会被删除
        HTTP协议将HTML文档和图片都作为单独的对象来处理，每次要重新连接
        HTTP1.1中，一次连接可以收发多个请求和响应，当所有数据都请求完成后，浏览器会主动出发断开连接的操作

2. 用电信号传输TCP/IP数据
2.1 创建套接字
2.1.1 协议栈内部结构
        协议栈a.k.a.操作系统中的的网络控制软件
        网卡是网络硬件
        TCP/IP软件采用分层结构（上层会向下层委派工作）
                应用程序
                    网络应用程序（如浏览器，邮件客户端，Wed服务器，邮件服务等）
                    Socket库
                        解析器
                操作系统
                    TCP（需要连接），UDP(不需要连接）
                    IP（传送网络包，确定路由）
                        ICMP（Internet Control Message Protocol，用于告知网络包传送过程中产生的错误以及各种控制信息）
                        ARP（Address Resolution Protocol，用于根据IP地址查询相应的以太网MAC地址）
                驱动程序
                    网卡驱动程序（控制网卡）
                硬件
                    网卡
        浏览器、邮件等一般应用程序收发数据时用TCP
        DNS查询等收发较短的控制数据时用UDP
2.1.2 套接字的实体就是通信控制信息
        套接字是一个概念，非实体
        协议栈内部有个一块用于存放控制信息的内存空间，这里记录了用于控制通信操作的控制信息，不准确地说，套接字约等于这些控制信息
        协议栈是根据套接字中记录的控制信息来工作的
2.1.3 调用socket时的操作
        创建套接字时，首先分配一个套接字所需的内存空间（协议栈向操作系统的内存管理模块申请让其划分出一块空间），然后向其中写入初始状态
2.2 连接服务器
2.2.1 连接是什么意思
        创建套接字之后，应用程序会调用connect，随后协议栈会将本地的套接字与服务器的套接字进行连接
        连接，实际上是通信双方交换控制信息：
                如：将服务器的IP地址和端口号等信息告诉协议栈
                客户端向服务器传达开始通信的请求
                执行数据收发时，还需要准备缓冲区
2.2.2 负责保存控制信息的头部
        控制信息可以分为两类
        1.客户端和服务器相互联络时交换的控制信息
                以太网头部（MAC头部）及IP头部 | TCP头部 | 数据块
        2.保存在套接字中，用来控制协议栈操作的信息 （可以说套接字的控制信息和协议栈的程序本身是一体的，所以协议栈具体需要哪些信息根据协议栈本身的实现方式不同而不同）
2.2.3 连接操作的实际过程
        A. 在TCP模块处创建表示连接控制信息的头部，将SYN设为1
        B. 委托IP模块发送信息
        C. 服务器通过TCP头部的信息找到要连接的套接字
        D. 服务器端把状态改为正在连接，把SYN设置为1， ACK控制位设为1
        E. 委托IP模块向客户端返回响应
        F. 客户端ACK设为1并发回服务器
        连接建立，协议栈的操作结束，控制流程被交回到应用程序
2.3 收发数据
2.3.1 将HTTP请求消息交给协议栈
        应用程序调用Socket库中的write将要发送的数据交给协议栈，协议赞执行发送操作
        协议栈不是每次都已收到数据就马上发送出去，而根据1.MTU来判断，避免是否将数据存放在发送缓冲区并等待下一段数据，以避免发大量小包堵塞网络交通，2. 每段数据发送的时间和频率，已确定是否要马上发送以避免发送延迟
        应用程序可以设置是否等待缓冲区填满
        MTU（Maximum Transmission Unit）：一个网络包的最大程度，以太网中一般为1500字节 （IP头部 | TCP头部 | 数据 ）
        MSS（Maximum Segment Size）：除去头部之后，一个网络包所能容纳的TCP数据的最大程度 （数据）
        FSD | MAC头部 | IP头部 | TCP头部 | 数据 | FCS
2.3.2 对较大的数据进行拆分
        应用程序的数据一般都比较大，因此TCP会按照网络包的大小对数据进行拆分，并在前加上TCP头部
2.3.3 使用ACK号确认网络包已收到
        通过‘序号’和’ACK号‘可以确认接收方是否收到了网络包
        A. 客户端在连接时计算出与从客户端到服务器发向通信相关的序号初始值，发送给服务器
        B. 服务器通过初始值算出ACK号并返回给客户端
        C. 服务器计算出与从客户端到服务器发向通信相关的序号初始值，发送给客户端
        网卡、集线器、路由器都没有错误补偿机制，一检测到错误就直接对其相应的包
2.3.4 根据网络包平均往返时间调整ACK号等待时间
        超时时间：返回ACK号的等待时间
        TCP采用动态调整等待时间的方法，在发送数据的过程中持续测量ACK号的返回时间
        等待时间有个最小值，一般在0.5秒到1秒之间
2.3.5 使用窗口有效管理ACK号
        TCP采用滑动窗口方式管理数据发送和ACK号的操作，避免接收方缓冲区溢出
        接收方需要告诉发送方自己最多能接收多少数据（窗口大小），然后发送方根据这个值对数据发送操作进行控制 （动态、多次update）
2.3.6 ACK与窗口的合并
        更新窗口大小的动机：接收方处理了一部分数据将其传递给应用程序，导致接受缓冲区剩余容量增加
        为了避免发送过多的包，接收方在发送ACK号和窗口更新时，并不会马上把包发送出去，而是会等待一段时间，在这个过程中很有可能会出现其他的通知操作，这样就可以把两种通知合并在一个包里发送了
2.3.7 接收HTTP相应消息
        应用程序委托协议栈发送请求消息之后，会调用read程序来获取响应消息   
2.4 从服务器断开并删除套接字
2.4.1 数据发送完毕后断开了连接
        协议栈在设计上允许任何一方先发起断开过程
        A. 服务器调用Socket库中的close程序，协议栈会生成包含断开信息的TCP头部（将控制为重的FIN设为1）
        B. 协议栈委托IP模块向反方发送数据，同时，套接字中也会记录下断开操作的相关信息
        C. 客户端收到FIN为1的TCP头部，把自己的套接字标记为进入断开操作状态，返回ACK号表明收到此消息
        D. 应用程序调用read读取消息，协议栈通知应用程序数据收发完成
        E. 应用程序调用close来结束数据收发操作
        F. 协议栈生成FIN为1的TCP包，发送给服务器，服务器返回ACK
2.4.2 删除套接字
        通信结束，套接字会等待一段时间再被删除，为防止误操作
2.4.3 数据收发操作小结

2.5 IP与以太网的包收发操作
2.5.1 包的基本知识
        包的基本结构
                头部 | 数据（内容）
        TCP/IP包
                MAC头部 | IP头部 | TCP头部 | 数据块
                -----------以太网包--------------
                        --------IP包------------
                                ----包的内容-----
        终端节点：发送方和接收方
        转发节点/中间节点：转发设备
        路由器VS集线器：
                路由器根据目标地址判断下一个路由器的位置
                集线器在子网中将网络包传输到下一个路由
                集线器按照以太网规则传输包，路由器按照IP规则传输包
        IP协议VS以太网协议：        
                IP协议根据目标地址判断下一个IP转发设备的位置
                子网中的以太网协议将包传输到下一个转发设备
        包的传输（IP和以太网的分工）：
        A. 发送方将包的目的地，IP地址写入IP头部
        B. IP协议根据此地址查到包的传输方向，找到下一个路由器的位置
        C. IP协议查找下一个路由器的以太网地址（MAC地址）并将此地址写入MAC头部中，并委托以太网协议将包传输过去
        D. 包经过集线器，集线器根据MAC头部的目的地查找出相应的传输方向
        E. 包到达下一个路由器，MAC头部丢弃，路由器根据IP头部的目的地信息查出接下来应该发往哪个路由器，查出下一个路由器的MAC地址，并写入MAC头部
        F. 包被发往下一个节点
2.5.2 包收发操作概览 
        发送：
                A. TCP模块在数据块前面加上TCP头部，整个传递给IP模块（委托给IP模块）
                B. IP模块将包当做一整块数据， 在前面加上包含控制信息的头部，即IP头部和MAC头部
                C. 封装好的包被交给网络硬件（统称网卡）
                D. 网卡将数字信息转换成电信号或光信号，通过网线或光纤发送出去，经过转发设备，一步步到达接收方
        接收：
                A. 信息以电信号的形式从网线传输进来
                B. 网卡将其转换为数字信息并传递给IP模块
                C. IP模块会在MAC头部、IP头部和TCP头部后加上数据块，传递给TCP模块
        无论要收发的包时控制包还是数据包，IP对各种类型的包的收发操作都是相同的 （IP模块将TCP头部和数据块看做一整块二进制数据）
2.5.3 生成包含接收方IP地址的IP头部
        IP头部格式字段有多种内容
        IP不会自行判断包的目的地，而是将包发往应用程序指定的接收方
        IP头部的’接收方IP地址‘填写通信对象的IP地址
        发送方IP地址需要判断发送所使用的网卡，并填写该网卡的IP地址
2.5.4 生成以太网用的MAC头部
        MAC头部的字段：
                接收方MAC地址 | 发送方MAC地址 | 以太类型
        IP模块根据路由表Gateway栏的内容判断应该把包发给谁
2.5.5 通过ARP查询目标路由器的MAC地址
        APR： Address Resolution Protocol 
        ARP利用以太网的广播方法，对所有设备提问，是这个IP地址的设备会做出相应，并告知其MAC地址
        ARP缓存可以减少ARP包的数量，其缓存每过几分钟就会清空
        IP模块将MAC头部加在IP头部前面
        IP负责整个打包工作，网卡就只要负责接收，这样一块网卡也就能支持各种类型的包
2.5.6 以太网的基本知识
        以太网是一种为多台计算机能够彼此自由并廉价地相互通信而设计的通信技术
        原型：10BASE5，主干网线，收发器网线，加收发器；网络中的任何一台设备发送的信号所有设备都能接收到
        演变：采用中继式集线器的变体（10BASE-T),信号通过中继式集线器扩散到整个网络
        如今，以太网使用交换式集线器结构，信号只会流到根据MAC地址指定的设备，并非所有设备都能收到
        以太网3个性质：1.用发送方MAC（Media Access Control）地址识别发送方，2.将包发送到MAC头部的接收方MAC地址代表的目的地，3.用以太类型识别包的内容
2.5.7 将IP包转换成电或光信号发送出去
        负责执行这一操作的是网卡
        网卡的ROM中保存着全世界唯一的MAC地址，这是在生产网卡时写入的
        网卡中保存的MAC地址会有网卡驱动程序读取并分配给MAC模块 （计算机启动操作系统的时候，网卡驱动程序会对硬件进行初始化操作，并在MAC模块中设置MAC地址）
2.5.8 给网络包再加3个控制数据
        网卡驱动从IP模块获取包后，将其复制到网卡内的缓冲区，MAC收到指令，将包从缓冲区取出，在开头加上报头和起始帧分界符（SFD)，并在末尾加上用于检测错误的FCS（帧校验序列）
        报头和起始帧分界符 | MAC头部 | IP头部 | TCP头部 |    数据    | FCS |                               
        -----网卡负责---- ——————IP负责————— —TCP负责- —应用程序负责- -网卡负责
        报头用于测定读取数据的时机
        SFD用来确定帧的起始位置
2.5.9 向集线器发送网络包
        网卡的MAC模块生成通用信号，然后由PHY（MAU)模块转换成可在网线中传输的格式，并通过网线发送出去
        发送信号的操作分两种：
                使用集线器的半双工模式--发送和接收同时并行
                使用交换机的全双工模式--某一时刻只能进行发送或接收之一
        阻塞信号：以太网中发生碰撞时，为了告知所有设备而发送的一种特殊信号
2.5.10 接收返回包
        在使用集线器的半双工模式以太网中，一台设备发送的信号会到达连接在集线器上的所有设备；所以第一步是把信号全部接收进来
        A. PHY（MAU)模块将信号转换成通过格式并发送给MAC模块
        B. MAC模块从头开始将信号转换为数字信息，存放到缓冲区，并检查FCS，是否一致；若否，丢弃包
        C. 检查MAC地址，若OK，放进缓冲区
        D. 网卡使用中断机制，通知计算机收到一个包
        E. CPU挂起正在处理的程序，切换到操作系统中的中断处理程序
        F. 网卡驱动被中断处理程序调用， 从网卡的缓冲区取出包，冰果MAC头部的以太类型字段判断协议的类型，并把包交给对应的协议栈
2.5.11 将服务器的相应包从IP传递给TCP
        假设返回的是网络包
        A. IP模块检查IP头部，若地址不一致，会通过ICMP消息将错误告知发送方；若地址一致，收下
        B. 若数据包经过分片，IP模块会根据分片的标记和分片偏移量字段对包进行分片重组（将小包还原成原始的包）
        C. TCP模块根据IP头部的接收方和发送方IP地址，以及TCP头部中的接收方和发送方端口查找相应的套接字，并执行相应的操作
2.6 UDP协议的收发操作
2.6.1 不需要重发的数据用UDP发送更高效
        TCP机制复杂是因为对包的送达状态进行监控
        但数据短，每次只有一个包，就不需要如此复杂的机制
2.6.2 控制用的短数据
        如DNS查询等交换控制信息的基本操作（一个包的大小范围）可以用UDP来代替TCP
        UDP没有TCP的接受确认、窗口等机制，也不对包的发送状态进行监控，因此收发数据前夜不需要交换控制信息，只需要在从应用程序获取的数据前面加上UDP头部，交给IP进行发送
        接收时，根据IP头部中的接收方和发送方IP地址，以及UDP头部中的接收方和发送方端口号，找到相应的桃姐子并将数据交给相应的应用程序就可以了
2.6.3 音频和视频数据
        发送音频和视频数据的时候回用UDP，因为这些数据必须在规定的时间内送达，而TCP要通过接收确认相应来检查错误，重发很可能会错过播放时间

3. 从网线到网络设备
3.1 信号在网线和集线器中传输
3.1.1 每个包都是独立传输的
        家用路由器已经继承了集线器和交换机的功能
3.1.2 防止网线中的信号衰减很重要
        即使线路条件很好，没有噪声，信号在传输过程中依然会发生是真，如果再加上噪声的影响，失真就会更厉害。
        如果本来就已经衰减的信号再进一步失真，就会出现对0和1的误判，这就是产生通信错误的原因
3.1.3 ‘双绞’是为了抑制噪声
        局域网的网线使用双绞线
        噪声产生的原因：网线周围的电磁波 （在网线中产生和原本的信号不同的电流，信号和噪声的电流就会混杂在一起，导致信号的波形放生失真）
        影响网线的电磁波分两种：1.由电机、荧光灯、CRT显示器等设备泄露出来的电磁波，2.从网线中相邻的信号线泄露出来的（串扰）
        双绞线的缠绕方式使得正负信号线产生的噪声影响是相反的，所以两者相互抵消
3.1.4 集线器将信号发往所有线路
        集线器每个接口的后面装有和网卡中的PHY（MAU)功能相同的模块，要正常接收信号，必须将’发送线路‘和’接收线路’连接起来
        MDI（Media Dependent Interface）是对RJ-45接口和信号收发模块进行直接连线，MDI-X（MDI-Crossover)则是交叉连线 （集线器接口有一个MDI/MDI-X切换开关）
        集线器将信号发送给所有连接在它上面的线路
        交叉网线也可以用来连接两台集线
3.2 交换机的包转发功能
3.2.1 交换机根据地址表进行转发
        可以认为交换机的每个网线接口后面都是一块网卡（网线借口和后面的电路部分加在一起成为一个端口，所以可以说交换机的一个端口相当于计算机上的一块网卡）
        但交换机端口的MAC模块不具有MAC地址 
        A. 信号到达网线借口，由PHY（MAU)模块接收
        B. PHY（MAU)将网线中的信号转为通用格式，并传递给MAC模块
        C. MAC模块将信号转换为数字信息，检查FCS，没问题的话放到缓冲区中
        D. 查询接收方的MAC地址是否在MAC地址表中有记录 （表中主要有两个信息：1.设备的MAC地址，2.该设备连接在交换机的哪个端口上）
        E. 通过交换电路将包发送到相应的端口
3.2.2 MAC地址表的维护
        交换机在转发包的过程中，还需要对MAC地址表的内容进行维护
                1. 收到包时，将发送方MAC地址以及其输入端口的号码写入MAC地址表中
                2. 删除地址表中某条记录的操作，以防止设备移动时产生问题 （一段时间不使用的过时记录）
3.2.3 特殊操作
        当交换机发现一个包的目标端口和源端口是同一个，会直接丢弃这个包
        地址中找不到指定的MAC地址时，交换器会将包转发到除了源端口之外的所有端口上，只有相应的接收者才会接收包，其他设备会忽略
3.2.4 全双工模式可以同时进行发送和接收
        全双工模式是交换机特有的工作模式，它可以同时进行发送和接收操作，集线器不具备这样的功能
        集线器存在碰撞问题
        以太网全双工模式：无论网络有没有没信号都可以发送信号，同时这一工作模式下停用碰撞检测
3.2.5 自动协商：确定最优的传输速率
        自动协商：由相互连接的双方探测对方是否支持全双工模式，并自动切换成相应的工作模式，同时还能探测对方的传输速率并进行自动切换
        在以太网中，当没有数据在传输时，网络中会填充被称为连接脉冲的脉冲信号，可以检测对方是否正在工作，或网线有没有正常连接
3.2.6 交换机可同时执行多个转发操作
3.3 路由器的包转发操作
3.3.1 路由器的基本知识
        路由器包括转发模块（判断转发目的地）和端口模块（负责包的收发操作）
        端口模块类型：ADSL、FTTH、通信线路、无线局域网、以太网
        路由器的每个端口都具有MAC地址和IP地址，能成为以太网的发送方和接收方 （转发包时，路由器端口接收发给自己的包，然后查询转发目标，再由相应的端口作为发送方将包发送出去）
3.3.2 路由表中的信息
        路由器根据“IP地址”判断转发目标
        路由器会忽略主机号，只匹配网络号
        路由聚合：将几个子网合并成一个子网，并在路由表中只产生一条记录
        路由表的子网掩码列指标是再匹配网络包目标地址时需要对比的比特数量
        路由表维护方法：
                由人手动维护路由记录
                根据路由协议机制（如RIP，OSPF，BGP），通过路由器之间的信息交换由路由器自行维护路由表的记录
3.3.3 路由器的包接收操作
        端口机构与计算机的网卡基本相同，收发操作类似
        路由器的端口都具有MAC地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃
3.3.4 查询路由表确定输出端口
        路由器根据“最长匹配”原则和跃点数选择发送地址
        遇到不知道该转发到哪里的包，直接丢弃
3.3.5 找不到匹配路由器是选择默认路由
        路由表中子网掩码为0.0.0.0的记录表示“默认路由”
3.3.6 包的有效期
        包的IP头部有个TTL（time to live）字段，表示包的有效期，没经过一个路由器，路由器就会更新这个值（减1）
3.3.7 通过分片功能拆分大网络包
        TCP拆分：在数据装进包之前进行的，拆分好的一个数据块正好装进一个包里
        分片拆分：从IP分片角度看，这样一个包其实是一个未拆分的整体；分片是对一个完整的包再进行拆分的过程
        分片中，用端口类型决定的最大包长度与MTU进行比较；TCP头部及其后面的部分都是可以分片的数据，拆分后，每份数据前面会加上IP头部
3.3.8 路由器的发送操作和计算机相同
        路由器判断下一个转发目标的方法如下：
                如果路由表的网关列为IP地址，则该地址就是下一个转发目标
                如果路由表的网关列内容为空，则IP头部中的接收方IP地址就是下一个转发目标
        路由器也会使用ARP来查询下一个转发目标的MAC地址
3.3.9 路由器与交换机的关系
        IP与以太网的关系也就是路由器与交换机的关系
        IP(路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的
3.4 路由器的附加功能
3.4.1 通过地址转换有效利用IP地址
        将地址分为：公有地址（Globally Unique Address， or Public Address）和私有地址
        内网中的设备（私有地址）在和互联网直接收发网络包前，需要通过地址转换连接
3.4.2 地址转换的基本原理
        基本原理：在转发网络包时对IP头部中的IP地址和端口号（TCP和UDP的）进行改写
        将私有地址改成公有地址，也就是地址转换设备的互联网接入口的地址
3.4.3 改写端口的原因
        只改写地址，不改写端口号也行：但私有地址和公有地址必须一一对应
        改写端口号可以让一个公有地址对应多则几万个私有地址，提高了公有地址的利用率
3.4.4 从互联网访问公司内网
        互联网无法向内网没有正在访问互联网的地址发送网络包，此机制具有防止非法入侵的效果
        但是当希望从互联网访问公司内容时，可以通过手动将服务器的私有地址手动添加到地址转换设备中实现
3.4.5 路由器的包过滤
        在对包进行转发时，根据MAC头部、IP头部、TCP头部的内容，按照实现设置好的规则决定转发或是丢弃。许多防火墙设备或软件都是利用这一机制来防止非法入侵的

4. 通过接入网进入互联网内部
4.1 ADSL接入网的结构和工作方式
4.1.1 互联网的基本结构和家庭、公司网络是相同的
        互联网也是通过路由器来转发包的，而且路由器的基本机构和工作方式也没有什么不同，如放大版的家庭和公司网络
        和家庭和公司网络主要两个不同点：距离和路由的维护方式不同
4.1.2 连接用户与互联网的接入网
        互联网介入路由器是按照接入网规则来发送包的
        接入网：连接互联网与家庭、公司网络的通信线路 （使用运营商提供的通信服务室，一般也会将用户与运营商之间的线路叫做接入网）
        家用接入网：ADSL（Asymmetric Digital Subscriber Line），FTTH（Fiber to The Home），CATV，电话线，ISDN等
        公司还可以用专线
        ADSL：一种利用假设在电线杆上的金属电话线来尽心高速通信的技术，它的上行方向（用户到互联网）和下行方向（互联网到用户）的通信速率是不对称的
4.1.3 ADSL Modem将包拆分成信元
        互联网介入路由器会在网络包前面家还是那个MAC头部、PPPoE头部、PPPT头部，然后发送给ADSL Modem（PPPoE方式下）
        ADSL Modem将包拆分成信元，并转换成电信号发送给分离器
        信元：非常小的数据块，开头是5字节的头部，后面是48个字节的数据
        PPP： Point-to-Point Protocol，点到点协议。
4.1.4 ADSL将信元“调制”成信号
        调制：ADSL Modem采用的，用一种圆滑波形（正弦波）对信号进行合成来表示0和1
        ADSL采用的调制方式是振幅调制（ASK）和相位调制（PSK）相结合的正交振幅调制（QAM）方式
4.1.5 ADSL通过使用多个波来提高速率
4.1.6 分离器的作用
        分离器需要负责将电话和ADSL的信号进行分离
4.1.7 从用户到电话局
4.1.8 噪声的干扰
        ADSL信号收到干扰后并不会立即造成错误。ADSL信号分布在多个频段上，只有和噪声频率相同的信号会收到影响而无法读取，即可用的信号数量减少，结果到时速率下降
        ADSL会受到还会受到AM电台广播的干扰、电缆内部产生的噪声干扰
4.1.9 通过DSLAM到达BAS
        A. 信号通过电话线到达电话局之后，会经过配线盘、分离器到达DSLAM
        B. DSLAM通过读取信号波形，将信号还原成数字信息
        C. BAS负责将ATM信元还原成网络包并转发到互联网内部（将包的MAC头部和PPPoE头部丢弃，取出PPPT头部以及后面的数据， 加上隧道专用头部，并发送到隧道的出口）
        D. 网络包到达隧道出口的隧道专用路由器，隧道头部被去掉，IP包被取出，转发到互联网内部
        DSLAM：DSL Access Multipler，数字用户线介入复用设备，电话局用的多路ADSL Modem
        DSLAM具有ATM接口，和后方路由器收发数据时使用的是原始网络包拆分后的ATM信元形式
        BAS：Broadband Access Server，宽带接入服务器，也是一种路由器
4.2 光纤接入网（FTTH)
4.2.1 光纤的基本知识
        光纤：由一种双层结构的纤维状透明材质（玻璃和塑料）构成的，通过里面的纤芯中传到光信号来传输数字信息，光信号亮表示1，暗表示0
        光纤通信原理：将数字信息转换成电信号（1高压，0低压），再将电信号转换成光信号（输入LED、激光二极管等光源，高压亮，低压暗；reverse：通过光敏元件根据广的亮度产生不同的电压）
4.2.2 单模与多模
        单模和多模实际上表示相位一致的角度有一个还是多个
        多模光纤中可以传到多条光纤，能通过的光线较多，对光线和光敏元件的性能要求也比较低，从而可以降低光源和光敏元件的价格
        单模光纤的纤芯中异能传到一条光纤，能通过的光纤较少，相应低对于光源和光敏元件的性能要求较高，但信号的是真会比较小
        多模光纤越长，失真越大，当超过允许范围时，通信就会出错；单模则不会
4.2.3 通过光纤分路来降低成本
        FTTH：通过光纤来代替ADSL将用户端接入路由器和运营商的BAS连接起来的接入方式，有两种形态
        1. 用一根光纤直接从用户端连接到最近的电话局
        2. 在用户附近的电线杆上安装一个名为分光器的设备，通过这个设备让光纤分路，同时连接多个用户
4.3 接入网中使用的PPP和隧道
4.3.1 用户认证和配置下发
        ADSL和FTTH接入网中，都需要先输入用户名和密码，登录之后才能访问互联网，BAS就是登录操作的窗口，BAS使用PPPoE方式来实现此功能。
        PPPoE由传统电话拨号上网上使用的PPP协议发展而来
        PPP拨号上网工作方式：
                A. 用户向运营商的接入点拨打电话
                B. 接通后，输入用户名和密码进行登录操作 （通过RADIUS协议从RAS发送认证服务器以校验）
                C. 确认无误，认证服务器返回IP地址等配置信息（并为计算机分配公有地址），并下发给用户
                D. 用户配置参数
4.3.2 在以太网上传输PPP消息
        PPPoE是将PPP消息装入以太网包进行传输的方式
4.3.3 通过隧道将网络包发送给运营商 （scanning from here）
        无论任何机制，只要能够把包原封不动地搬运到另一端，从原理上就都可以用来建立隧道
        隧道有两种实现方式：
                1. 用TCP连接。在网络上的两台隧道路由器之间建立TCP连接，然后连接两端的套接字当做是路由器的端口，并从这个端口来收发数据。这时，TCP连接就好像变成了一根网线，包从一段穿过到另一端
                2. 封装（encapsulation）。将包含头部在内的整个包装入另一个包传输到隧道的另一端。
4.3.4 接入网的整体工作过程
        互联网介入路由器通过PPPoE的发现机制查询BAS的MAC地址
        BAS下发的TCP/IP参数会被配置到互联网接入路由器的BAS端的端口上，这样路由器就完成接入互联网的准备了
        BAS在收到用户路由器发送的网络包后，会去掉MAC头部和PPPoE头部，然后用隧道机制将包发送给网络运营商的路由器
4.3.5 不分配地址的无编号端口
        一对一连接的端口可以不分配IP地址，这种方式称为无编号
4.3.6 互联网接入路由器将私有地址转换为公有地址 （no notes from here)

5. 服务器端的局域网中有什么玄机
5.1. Web服务器的部署地点
5.1.1 在公司里部署Web服务器
        现在不是主流了，因为1.IP地址不足，2.安全问题，因为从互联网传来的网络包会无节制地进入服务器
        所以一般部署防火墙
        防火墙只允许发往指定服务的指定应用程序的网络包通过，从而屏蔽其他不允许通过的包
        防火墙需要和反病毒、非法入侵检测、访问隔离等机制并用
5.1.2 将Web服务器部署在数据中心
5.2 防火墙的结构和原理
5.2.1 主流的包过滤方式
        除了包过滤方式，还有应用层网关、电路层网关等几种方式
5.2.2 如何设置包过滤的规则
        先根据接收方和发送方地址判断包的流向，设置允许还是阻止，并且通过在判断条件上加上TCP头部或者UDP头部中的端口号，可以限定某个应用程序
        通过的包的头部可以知道许多有用信息
5.2.3 通过端口号限定应用程序
5.2.4 通过控制位判断连接方向
        如要禁止互联网访问服务器，除了上述的步骤，还要通过控制位来设置。如果第一个包是从Web服务器发往服务器的，就禁止，以此阻止连接的建立。
5.2.5 从公司内网访问公开区域的规则
        设置护林旺和公开区域之间的包过滤规则、公司内网和互联网之间、公司内网与公开区域之间的包过滤规则，要注意不要让这些规则相互干扰
5.2.6 让外部无法访问公司内网
5.2.7 通过防火墙
        如果包被判断为阻止进入，就会被丢弃并几率下俩，因为里面通常含有非法入侵的痕迹
        包过滤方式的防火墙可以根据接收方IP地址、发送方IP地址、接收方端口号、发送方端口号、控制位等信息来判断是否允许某个包通过
5.2.8 防火墙无法抵御的攻击
        防火墙只管关心包的起点和终点，不管包的内容。即使包中含有特定数据，会让服务器宕机，也无法发现。
        此问题根源在于Web服务器程序的bug，因为修复bug就是一种应对方法。而是在防火墙之外部署用来检查包的内容并阻止有害包的设备或软件。
5.3 通过将请求平均分配给多台服务器来平衡负载
5.3.1 性能不足时需要负载均衡
        分布式架构：使用多台服务器来分担负载的方法
        方法一：用多台服务器，减少每台服务器的访问量，用DNS服务器分配访问（a.k.a轮询）
                问题：无法跳过有故障的Web服务器；需要跨多页面的操作会出问题
5.3.2 使用负载均衡器分配访问
        用负载均衡器的IP地址代替服务器的IP地址注册到DNS服务器上，客户端给负载均衡器发送请求，负载均衡器决定转发给哪台Web服务器
        判断条件多种：是否跨多个页面，CPU、内存使用率等
5.4 使用缓存服务器分担负载
5.4.1 如何使用缓存服务器
        将整个系统功能分成不同的服务器
        缓存服务器是一种按功能来分担负载的方法，是一台通过代理机制对数据进行缓存的服务器
        代理介入Web服务器和客户端之间，具有对Web服务器访问进行中转的功能。当进行中转是，它可以将Web服务器返回的数据保存在磁盘中，并可以代替Web服务器将磁盘中的数据返回给客户端。这种保存的数据成文缓存
5.4.2 缓存服务器通过更新时间管理内容
5.4.3 最原始的代理--正向代理
        在客户端一侧部署缓存服务器
        还可以实现防火墙
        代理在转发的过程中可以查看请求的内容
        使用正向代理需要在浏览器中进行设置
5.4.4 正向代理的改良版--反向代理
        不需要在浏览器进行设置
        通过将请求消息中的URI中的目录名与Web服务器进行关联，使得代理能够转发一般的不包含完整网址的请求消息
5.4.5 透明代理
        通过查看请求消息的包头部。包的IP头部中包含了接收方IP地址，只要知道了这个地址，就知道用户要访问哪台服务器了。这种方法称为透明代理。
        不需要浏览器设置，也不需要在缓存服务器上设置转发目标，可以将请求转发给任意Web服务器
        要把透明代理放在请求消息从浏览器传到Web服务器的路径中，当消息经过时进行拦截
        透明代理也被说成是缓存
5.5 内容分发服务
5.5.1 利用内容分发服务分担负载
        混存服务器部署在1.服务器端，2.客户端，3.web服务运营与通信运营合作，部署在客户端
        内容分发服务（Content Delivery Network 或 Content Distribution Network）：
            厂商（CDSP）与主要供应商签约，部署很多缓存服务器，并与Web服务器运营者签约，是CDSP的缓存服务器配合Web服务器工作。
5.5.2 如何找到最近的缓存服务器
        1. 使用DNS服务器分配访问
                【DNS服务器工作原理：客户端用要访问的Web服务器域名生成查询消息-->局域网中（或运营商）的DNS服务器-->通过域名的层次结构找到负责管理该域名的DNS服务器（服务器端），并发送查询消息
                -->查询，并返回域名相对应的IP地址给客户端的DNS服务器-->客户端】
            A. 从缓存服务器部署地点的路由器收集路由信息，将路由表集中到DNS服务器上
            B. DNS服务器依次根据路由表查询从本机到客户端DNS服务器的路由信息
            C. 估算出最短距离
5.5.3 通过重定向服务器分配访问目标
        重定向（redirect）：将网络请求重新定个方向转到其他位置
        A. 将重定向服务器注册到Web服务器端的DNS服务器上 （这样客户端会将HTTP请求消息发送到重定向服务器上）
        B. 重定向服务器使用DNS服务器一样的方法，找到最近的缓存服务器，并将其地址放到Location字段中并返回响应
        C. 客户端重新访问制定的缓存服务器
            【DNS服务器优点：没有增加HTTP消息的交互次数
              重定向优点：根据HTTP消息的发送方IP地址估算距离，精度较高
              DNS服务器缺点：根据客户端DNS位置估算距离，精度交差
              重定向缺点：增加了HTTP消息的交互次数】
5.5.4 缓存的更新方法会影响性能
        好方法：
        让服务器在原始数据发生更新时，立即通知缓存服务器，使其数据一致保持最新状态（这样不需要每次都确认原始数据是否有更新，并且在第一次访问就能生效）
        对于由CGI程序生成的动态页面，保存静态部分在缓存中 （因动态页面无法保存在缓存服务器上）

6. 请求到达Web服务器，响应返回浏览器
6.1 服务器概览
6.1.1 客户端与服务器的区别
        硬件和操作系统不同 （但客户端计算机也可以用作服务器）
        网络相关的部分，网卡，协议栈，Socket库等功能相同，但用法不一样
6.1.2 服务器程序的结构
        服务程序与客户端是一对一的状态
        服务器程序可分为两个模块：1.等待连接模块， 2.负责与客户端通信的模块
            A. 服务器程序启动，读取配置文件，完成初始化操作，运行等待连接模块 
            B. 等待连接模块创建套接字，进入等待连接的暂停状态
            C. 客户端发起连接，模块恢复运行并接受连接
            D. 创建套接字副本，启动客户端通信模块 （另一种方法是事先启动几个客户端通信模块，当客户端发起连接时，从空闲的模块中挑选一个来将套接字移交给它处理）
            E. 客户端通信模块使用套接字新副本与客户端进行通信
            F. 通信结束，此模块退出
        服务器操作系统具有多任务、多线程功能
6.1.3 服务器的套接字和端口号
        从数据收发的角度看客户端和服务器的区别：客户端发起套接字连接，服务器等待套接字连接
        客户端：
            A. 创建套接字
            B. 用管道连接服务器端的套接字
            C. 收发数据
            D. 断开管道并删除套接字
        服务器：
            A. 创建套接字
            B-1. 将套接字设置为等待连接状态
            B-2. 接受连接
            C. 收发数据
            D. 断开管道并删除套接字
        如何判断哪个套接字对应哪个客户端：
            结合使用1.服务器套接字对应的端口号，2.服务器IP地址，3.客户端IP地址，4.客户端端口号
        为何不使用以上4种信息代替描述符，为何使用描述符指代套接字：
            I. 等待链接的套接字中没有客户端IP地址和端口号
            II. 使用描述符这一种信息比较简单
6.2 服务器的接收操作
6.2.1 网卡将接收到的信号转换成数字信息
        A. 网卡的MAC模块将网络包从信号还原为数字信息，校验FCS（frame check sequence）并存入缓冲区
        B. 通知CPU
        C. 网卡驱动会根据MAC头部判断协议类型，并将包交给相应的协议栈
6.2.2 IP模块的接收操作
        协议栈的IP模块检查IP头部：
        A. 检查接收方的IP地址，判断包是不是发给自己的
        B. 若服务器开启类似路由器的包转发功能，转发不是给自己的包
        C. 判断网络包是否经过分片，若是，将包暂存内存，分片全部到达后组装起来还原成原始包；若没有分片，直接保留
        D. 检查协议号字段，将包转交给相应的模块 （如’06‘，十六进制，转交给TCP模块；’11‘，十六进制，转交给UDP模块
6.2.3 TCP模块如何处理连接包 
        A. 确认TCP头部的控制位SYN为1
        B. 检查接收方端口号
        C. 为相应的等待连接套接字复制一个新的副本
        D. 记录发送方IP地址和端口号等信息
6.2.4  TCP模块如何处理数据包
        A. 根据收到的包的发送方IP地址、发送方端口号、接收方IP地址、接收方端口号找到相应的套接字
        B. 将数据块拼合起来并保存在接收缓冲区
        C. 行客户端返回ACK
6.2.5 TCP模块的断开操作
        A. 由应用层协议决定哪端先发起断开操作 （HTTP1.0中服务器先发起）
        B. 服务程序调用Socket库的close
        C. TCP模块生成一个控制位FIN为1的TCP头部，并委托IP模块发送给客户端
        D. 客户端返回ACK，调用close，生成FIN为1的TCP头部，发送给服务器
        E. 服务器返回ACK

6.3 Web服务器程序解释请求消息并作出响应
6.3.1 将请求的URI转换为实际的文件名
        Web服务器公开的、用户看到的目录并非服务器的真实目录，而是虚拟目录
        URI中写的是此虚拟目录中的路径名
        读取文件时，要先查询虚拟目录和实际目录的对应关系
6.3.2 运行CGI程序
        CGI: common gateway interface
        如果URI指定的文件内容为程序，服务器不会直接返回文件内容，而是运行这个程序，然后将程序输出的内容返回客户端
        method="get" or method="post"
6.3.3 Web服务器的访问控制
        主要有以下3种规则：
        1.客户端IP地址 （在调用accept接受连接时就知道客户端的IP地址，只需检查是否允许访问）
        2.客户端域名 （需要用DNS服务器，根据IP地址反查域名）
        3.用户名和密码 

6.3.4 返回响应消息
6.4 浏览器接收响应消息并显示内容
6.4.1 通过响应的数据类型判断其中的内容
        根据相应消息的Content-Type头部字段的值进行判断
6.4.2 浏览器显示网页内容，访问完成


